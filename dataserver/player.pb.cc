// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bin {
class PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player> {
} _Player_default_instance_;

namespace protobuf_player_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, bin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_int8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_uint8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_int16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_uint16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_int32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_uint32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_int64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_double_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_char_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_bytes_tiny_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_bytes_medium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, v_bytes_long_),
  8,
  0,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  18,
  20,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 25, sizeof(Player)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "player.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Player_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Player_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014player.proto\022\003bin\"\362\002\n\006Player\022\n\n\002id\030\001 \001"
      "(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005score\030\003 \001(\002\022\013\n\003bin\030\004"
      " \001(\014\022\016\n\006v_int8\030\005 \001(\021\022\017\n\007v_uint8\030\006 \001(\r\022\017\n"
      "\007v_int16\030\007 \001(\021\022\020\n\010v_uint16\030\010 \001(\r\022\017\n\007v_in"
      "t32\030\t \001(\021\022\020\n\010v_uint32\030\n \001(\r\022\017\n\007v_int64\030\013"
      " \001(\022\022\020\n\010v_uint64\030\014 \001(\004\022\017\n\007v_float\030\r \001(\002\022"
      "\020\n\010v_double\030\016 \001(\001\022\016\n\006v_bool\030\017 \001(\010\022\020\n\010v_s"
      "tring\030\020 \001(\014\022\016\n\006v_char\030\021 \001(\014\022\017\n\007v_bytes\030\022"
      " \001(\014\022\024\n\014v_bytes_tiny\030\023 \001(\014\022\026\n\016v_bytes_me"
      "dium\030\024 \001(\014\022\024\n\014v_bytes_long\030\025 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_player_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kIdFieldNumber;
const int Player::kNameFieldNumber;
const int Player::kScoreFieldNumber;
const int Player::kBinFieldNumber;
const int Player::kVInt8FieldNumber;
const int Player::kVUint8FieldNumber;
const int Player::kVInt16FieldNumber;
const int Player::kVUint16FieldNumber;
const int Player::kVInt32FieldNumber;
const int Player::kVUint32FieldNumber;
const int Player::kVInt64FieldNumber;
const int Player::kVUint64FieldNumber;
const int Player::kVFloatFieldNumber;
const int Player::kVDoubleFieldNumber;
const int Player::kVBoolFieldNumber;
const int Player::kVStringFieldNumber;
const int Player::kVCharFieldNumber;
const int Player::kVBytesFieldNumber;
const int Player::kVBytesTinyFieldNumber;
const int Player::kVBytesMediumFieldNumber;
const int Player::kVBytesLongFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:bin.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  bin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bin()) {
    bin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_);
  }
  v_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_string()) {
    v_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_string_);
  }
  v_char_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_char()) {
    v_char_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_char_);
  }
  v_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_bytes()) {
    v_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_);
  }
  v_bytes_tiny_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_bytes_tiny()) {
    v_bytes_tiny_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_tiny_);
  }
  v_bytes_medium_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_bytes_medium()) {
    v_bytes_medium_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_medium_);
  }
  v_bytes_long_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_v_bytes_long()) {
    v_bytes_long_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_long_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&v_bool_) -
    reinterpret_cast<char*>(&id_) + sizeof(v_bool_));
  // @@protoc_insertion_point(copy_constructor:bin.Player)
}

void Player::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_char_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_tiny_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_medium_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_long_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&v_bool_) -
    reinterpret_cast<char*>(&id_) + sizeof(v_bool_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:bin.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_char_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_tiny_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_medium_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bytes_long_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[0].descriptor;
}

const Player& Player::default_instance() {
  protobuf_player_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:bin.Player)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_bin()) {
      GOOGLE_DCHECK(!bin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bin_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_string()) {
      GOOGLE_DCHECK(!v_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_char()) {
      GOOGLE_DCHECK(!v_char_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_char_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_bytes()) {
      GOOGLE_DCHECK(!v_bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_bytes_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_bytes_tiny()) {
      GOOGLE_DCHECK(!v_bytes_tiny_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_bytes_tiny_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_bytes_medium()) {
      GOOGLE_DCHECK(!v_bytes_medium_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_bytes_medium_.UnsafeRawStringPointer())->clear();
    }
    if (has_v_bytes_long()) {
      GOOGLE_DCHECK(!v_bytes_long_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*v_bytes_long_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&v_uint32_) -
      reinterpret_cast<char*>(&id_) + sizeof(v_uint32_));
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&v_int64_, 0, reinterpret_cast<char*>(&v_bool_) -
      reinterpret_cast<char*>(&v_int64_) + sizeof(v_bool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bin.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (tag == 29u) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes bin = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 v_int8 = 5;
      case 5: {
        if (tag == 40u) {
          set_has_v_int8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &v_int8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 v_uint8 = 6;
      case 6: {
        if (tag == 48u) {
          set_has_v_uint8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_uint8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 v_int16 = 7;
      case 7: {
        if (tag == 56u) {
          set_has_v_int16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &v_int16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 v_uint16 = 8;
      case 8: {
        if (tag == 64u) {
          set_has_v_uint16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_uint16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 v_int32 = 9;
      case 9: {
        if (tag == 72u) {
          set_has_v_int32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &v_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 v_uint32 = 10;
      case 10: {
        if (tag == 80u) {
          set_has_v_uint32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_uint32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 v_int64 = 11;
      case 11: {
        if (tag == 88u) {
          set_has_v_int64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &v_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 v_uint64 = 12;
      case 12: {
        if (tag == 96u) {
          set_has_v_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_float = 13;
      case 13: {
        if (tag == 109u) {
          set_has_v_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v_double = 14;
      case 14: {
        if (tag == 113u) {
          set_has_v_double();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool v_bool = 15;
      case 15: {
        if (tag == 120u) {
          set_has_v_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_string = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_char = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_char()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_bytes = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_bytes_tiny = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_bytes_tiny()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_bytes_medium = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_bytes_medium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes v_bytes_long = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_bytes_long()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bin.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bin.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bin.Player)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional bytes bin = 4;
  if (has_bin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bin(), output);
  }

  // optional sint32 v_int8 = 5;
  if (has_v_int8()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->v_int8(), output);
  }

  // optional uint32 v_uint8 = 6;
  if (has_v_uint8()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->v_uint8(), output);
  }

  // optional sint32 v_int16 = 7;
  if (has_v_int16()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->v_int16(), output);
  }

  // optional uint32 v_uint16 = 8;
  if (has_v_uint16()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->v_uint16(), output);
  }

  // optional sint32 v_int32 = 9;
  if (has_v_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->v_int32(), output);
  }

  // optional uint32 v_uint32 = 10;
  if (has_v_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->v_uint32(), output);
  }

  // optional sint64 v_int64 = 11;
  if (has_v_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(11, this->v_int64(), output);
  }

  // optional uint64 v_uint64 = 12;
  if (has_v_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->v_uint64(), output);
  }

  // optional float v_float = 13;
  if (has_v_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->v_float(), output);
  }

  // optional double v_double = 14;
  if (has_v_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->v_double(), output);
  }

  // optional bool v_bool = 15;
  if (has_v_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->v_bool(), output);
  }

  // optional bytes v_string = 16;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->v_string(), output);
  }

  // optional bytes v_char = 17;
  if (has_v_char()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->v_char(), output);
  }

  // optional bytes v_bytes = 18;
  if (has_v_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->v_bytes(), output);
  }

  // optional bytes v_bytes_tiny = 19;
  if (has_v_bytes_tiny()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->v_bytes_tiny(), output);
  }

  // optional bytes v_bytes_medium = 20;
  if (has_v_bytes_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->v_bytes_medium(), output);
  }

  // optional bytes v_bytes_long = 21;
  if (has_v_bytes_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->v_bytes_long(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bin.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bin.Player)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // optional bytes bin = 4;
  if (has_bin()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bin(), target);
  }

  // optional sint32 v_int8 = 5;
  if (has_v_int8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->v_int8(), target);
  }

  // optional uint32 v_uint8 = 6;
  if (has_v_uint8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->v_uint8(), target);
  }

  // optional sint32 v_int16 = 7;
  if (has_v_int16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->v_int16(), target);
  }

  // optional uint32 v_uint16 = 8;
  if (has_v_uint16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->v_uint16(), target);
  }

  // optional sint32 v_int32 = 9;
  if (has_v_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->v_int32(), target);
  }

  // optional uint32 v_uint32 = 10;
  if (has_v_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->v_uint32(), target);
  }

  // optional sint64 v_int64 = 11;
  if (has_v_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(11, this->v_int64(), target);
  }

  // optional uint64 v_uint64 = 12;
  if (has_v_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->v_uint64(), target);
  }

  // optional float v_float = 13;
  if (has_v_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->v_float(), target);
  }

  // optional double v_double = 14;
  if (has_v_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->v_double(), target);
  }

  // optional bool v_bool = 15;
  if (has_v_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->v_bool(), target);
  }

  // optional bytes v_string = 16;
  if (has_v_string()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->v_string(), target);
  }

  // optional bytes v_char = 17;
  if (has_v_char()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->v_char(), target);
  }

  // optional bytes v_bytes = 18;
  if (has_v_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->v_bytes(), target);
  }

  // optional bytes v_bytes_tiny = 19;
  if (has_v_bytes_tiny()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->v_bytes_tiny(), target);
  }

  // optional bytes v_bytes_medium = 20;
  if (has_v_bytes_medium()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->v_bytes_medium(), target);
  }

  // optional bytes v_bytes_long = 21;
  if (has_v_bytes_long()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->v_bytes_long(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bin.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bin.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes bin = 4;
    if (has_bin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bin());
    }

    // optional bytes v_string = 16;
    if (has_v_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_string());
    }

    // optional bytes v_char = 17;
    if (has_v_char()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_char());
    }

    // optional bytes v_bytes = 18;
    if (has_v_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes());
    }

    // optional bytes v_bytes_tiny = 19;
    if (has_v_bytes_tiny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes_tiny());
    }

    // optional bytes v_bytes_medium = 20;
    if (has_v_bytes_medium()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes_medium());
    }

    // optional bytes v_bytes_long = 21;
    if (has_v_bytes_long()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes_long());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional sint32 v_int8 = 5;
    if (has_v_int8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->v_int8());
    }

    // optional uint32 v_uint8 = 6;
    if (has_v_uint8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint8());
    }

    // optional sint32 v_int16 = 7;
    if (has_v_int16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->v_int16());
    }

    // optional uint32 v_uint16 = 8;
    if (has_v_uint16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint16());
    }

    // optional sint32 v_int32 = 9;
    if (has_v_int32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->v_int32());
    }

    // optional uint32 v_uint32 = 10;
    if (has_v_uint32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v_uint32());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional sint64 v_int64 = 11;
    if (has_v_int64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->v_int64());
    }

    // optional uint64 v_uint64 = 12;
    if (has_v_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->v_uint64());
    }

    // optional double v_double = 14;
    if (has_v_double()) {
      total_size += 1 + 8;
    }

    // optional float v_float = 13;
    if (has_v_float()) {
      total_size += 1 + 4;
    }

    // optional bool v_bool = 15;
    if (has_v_bool()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bin.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bin.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bin.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bin.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_bin()) {
      set_has_bin();
      bin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bin_);
    }
    if (from.has_v_string()) {
      set_has_v_string();
      v_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_string_);
    }
    if (from.has_v_char()) {
      set_has_v_char();
      v_char_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_char_);
    }
    if (from.has_v_bytes()) {
      set_has_v_bytes();
      v_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_);
    }
    if (from.has_v_bytes_tiny()) {
      set_has_v_bytes_tiny();
      v_bytes_tiny_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_tiny_);
    }
    if (from.has_v_bytes_medium()) {
      set_has_v_bytes_medium();
      v_bytes_medium_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_medium_);
    }
    if (from.has_v_bytes_long()) {
      set_has_v_bytes_long();
      v_bytes_long_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.v_bytes_long_);
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_v_int8()) {
      set_v_int8(from.v_int8());
    }
    if (from.has_v_uint8()) {
      set_v_uint8(from.v_uint8());
    }
    if (from.has_v_int16()) {
      set_v_int16(from.v_int16());
    }
    if (from.has_v_uint16()) {
      set_v_uint16(from.v_uint16());
    }
    if (from.has_v_int32()) {
      set_v_int32(from.v_int32());
    }
    if (from.has_v_uint32()) {
      set_v_uint32(from.v_uint32());
    }
  }
  if (from._has_bits_[16 / 32] & 2031616u) {
    if (from.has_v_int64()) {
      set_v_int64(from.v_int64());
    }
    if (from.has_v_uint64()) {
      set_v_uint64(from.v_uint64());
    }
    if (from.has_v_double()) {
      set_v_double(from.v_double());
    }
    if (from.has_v_float()) {
      set_v_float(from.v_float());
    }
    if (from.has_v_bool()) {
      set_v_bool(from.v_bool());
    }
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bin.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bin.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  name_.Swap(&other->name_);
  bin_.Swap(&other->bin_);
  v_string_.Swap(&other->v_string_);
  v_char_.Swap(&other->v_char_);
  v_bytes_.Swap(&other->v_bytes_);
  v_bytes_tiny_.Swap(&other->v_bytes_tiny_);
  v_bytes_medium_.Swap(&other->v_bytes_medium_);
  v_bytes_long_.Swap(&other->v_bytes_long_);
  std::swap(id_, other->id_);
  std::swap(score_, other->score_);
  std::swap(v_int8_, other->v_int8_);
  std::swap(v_uint8_, other->v_uint8_);
  std::swap(v_int16_, other->v_int16_);
  std::swap(v_uint16_, other->v_uint16_);
  std::swap(v_int32_, other->v_int32_);
  std::swap(v_uint32_, other->v_uint32_);
  std::swap(v_int64_, other->v_int64_);
  std::swap(v_uint64_, other->v_uint64_);
  std::swap(v_double_, other->v_double_);
  std::swap(v_float_, other->v_float_);
  std::swap(v_bool_, other->v_bool_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_player_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional uint32 id = 1;
bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Player::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void Player::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:bin.Player.id)
  return id_;
}
void Player::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.id)
}

// optional bytes name = 2;
bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:bin.Player.name)
  return name_.GetNoArena();
}
void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.name)
}
#if LANG_CXX11
void Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.name)
}
#endif
void Player::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.name)
}
void Player::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.name)
}
::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bin.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:bin.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.name)
}

// optional float score = 3;
bool Player::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Player::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
void Player::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
void Player::clear_score() {
  score_ = 0;
  clear_has_score();
}
float Player::score() const {
  // @@protoc_insertion_point(field_get:bin.Player.score)
  return score_;
}
void Player::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.score)
}

// optional bytes bin = 4;
bool Player::has_bin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Player::set_has_bin() {
  _has_bits_[0] |= 0x00000002u;
}
void Player::clear_has_bin() {
  _has_bits_[0] &= ~0x00000002u;
}
void Player::clear_bin() {
  bin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bin();
}
const ::std::string& Player::bin() const {
  // @@protoc_insertion_point(field_get:bin.Player.bin)
  return bin_.GetNoArena();
}
void Player::set_bin(const ::std::string& value) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.bin)
}
#if LANG_CXX11
void Player::set_bin(::std::string&& value) {
  set_has_bin();
  bin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.bin)
}
#endif
void Player::set_bin(const char* value) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.bin)
}
void Player::set_bin(const void* value, size_t size) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.bin)
}
::std::string* Player::mutable_bin() {
  set_has_bin();
  // @@protoc_insertion_point(field_mutable:bin.Player.bin)
  return bin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_bin() {
  // @@protoc_insertion_point(field_release:bin.Player.bin)
  clear_has_bin();
  return bin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_bin(::std::string* bin) {
  if (bin != NULL) {
    set_has_bin();
  } else {
    clear_has_bin();
  }
  bin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bin);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.bin)
}

// optional sint32 v_int8 = 5;
bool Player::has_v_int8() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Player::set_has_v_int8() {
  _has_bits_[0] |= 0x00000400u;
}
void Player::clear_has_v_int8() {
  _has_bits_[0] &= ~0x00000400u;
}
void Player::clear_v_int8() {
  v_int8_ = 0;
  clear_has_v_int8();
}
::google::protobuf::int32 Player::v_int8() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int8)
  return v_int8_;
}
void Player::set_v_int8(::google::protobuf::int32 value) {
  set_has_v_int8();
  v_int8_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int8)
}

// optional uint32 v_uint8 = 6;
bool Player::has_v_uint8() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Player::set_has_v_uint8() {
  _has_bits_[0] |= 0x00000800u;
}
void Player::clear_has_v_uint8() {
  _has_bits_[0] &= ~0x00000800u;
}
void Player::clear_v_uint8() {
  v_uint8_ = 0u;
  clear_has_v_uint8();
}
::google::protobuf::uint32 Player::v_uint8() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint8)
  return v_uint8_;
}
void Player::set_v_uint8(::google::protobuf::uint32 value) {
  set_has_v_uint8();
  v_uint8_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint8)
}

// optional sint32 v_int16 = 7;
bool Player::has_v_int16() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Player::set_has_v_int16() {
  _has_bits_[0] |= 0x00001000u;
}
void Player::clear_has_v_int16() {
  _has_bits_[0] &= ~0x00001000u;
}
void Player::clear_v_int16() {
  v_int16_ = 0;
  clear_has_v_int16();
}
::google::protobuf::int32 Player::v_int16() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int16)
  return v_int16_;
}
void Player::set_v_int16(::google::protobuf::int32 value) {
  set_has_v_int16();
  v_int16_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int16)
}

// optional uint32 v_uint16 = 8;
bool Player::has_v_uint16() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Player::set_has_v_uint16() {
  _has_bits_[0] |= 0x00002000u;
}
void Player::clear_has_v_uint16() {
  _has_bits_[0] &= ~0x00002000u;
}
void Player::clear_v_uint16() {
  v_uint16_ = 0u;
  clear_has_v_uint16();
}
::google::protobuf::uint32 Player::v_uint16() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint16)
  return v_uint16_;
}
void Player::set_v_uint16(::google::protobuf::uint32 value) {
  set_has_v_uint16();
  v_uint16_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint16)
}

// optional sint32 v_int32 = 9;
bool Player::has_v_int32() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Player::set_has_v_int32() {
  _has_bits_[0] |= 0x00004000u;
}
void Player::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00004000u;
}
void Player::clear_v_int32() {
  v_int32_ = 0;
  clear_has_v_int32();
}
::google::protobuf::int32 Player::v_int32() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int32)
  return v_int32_;
}
void Player::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int32)
}

// optional uint32 v_uint32 = 10;
bool Player::has_v_uint32() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Player::set_has_v_uint32() {
  _has_bits_[0] |= 0x00008000u;
}
void Player::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00008000u;
}
void Player::clear_v_uint32() {
  v_uint32_ = 0u;
  clear_has_v_uint32();
}
::google::protobuf::uint32 Player::v_uint32() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint32)
  return v_uint32_;
}
void Player::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint32)
}

// optional sint64 v_int64 = 11;
bool Player::has_v_int64() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Player::set_has_v_int64() {
  _has_bits_[0] |= 0x00010000u;
}
void Player::clear_has_v_int64() {
  _has_bits_[0] &= ~0x00010000u;
}
void Player::clear_v_int64() {
  v_int64_ = GOOGLE_LONGLONG(0);
  clear_has_v_int64();
}
::google::protobuf::int64 Player::v_int64() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int64)
  return v_int64_;
}
void Player::set_v_int64(::google::protobuf::int64 value) {
  set_has_v_int64();
  v_int64_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int64)
}

// optional uint64 v_uint64 = 12;
bool Player::has_v_uint64() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Player::set_has_v_uint64() {
  _has_bits_[0] |= 0x00020000u;
}
void Player::clear_has_v_uint64() {
  _has_bits_[0] &= ~0x00020000u;
}
void Player::clear_v_uint64() {
  v_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_v_uint64();
}
::google::protobuf::uint64 Player::v_uint64() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint64)
  return v_uint64_;
}
void Player::set_v_uint64(::google::protobuf::uint64 value) {
  set_has_v_uint64();
  v_uint64_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint64)
}

// optional float v_float = 13;
bool Player::has_v_float() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Player::set_has_v_float() {
  _has_bits_[0] |= 0x00080000u;
}
void Player::clear_has_v_float() {
  _has_bits_[0] &= ~0x00080000u;
}
void Player::clear_v_float() {
  v_float_ = 0;
  clear_has_v_float();
}
float Player::v_float() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_float)
  return v_float_;
}
void Player::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_float)
}

// optional double v_double = 14;
bool Player::has_v_double() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Player::set_has_v_double() {
  _has_bits_[0] |= 0x00040000u;
}
void Player::clear_has_v_double() {
  _has_bits_[0] &= ~0x00040000u;
}
void Player::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
double Player::v_double() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_double)
  return v_double_;
}
void Player::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_double)
}

// optional bool v_bool = 15;
bool Player::has_v_bool() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Player::set_has_v_bool() {
  _has_bits_[0] |= 0x00100000u;
}
void Player::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00100000u;
}
void Player::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
bool Player::v_bool() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bool)
  return v_bool_;
}
void Player::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_bool)
}

// optional bytes v_string = 16;
bool Player::has_v_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Player::set_has_v_string() {
  _has_bits_[0] |= 0x00000004u;
}
void Player::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000004u;
}
void Player::clear_v_string() {
  v_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_string();
}
const ::std::string& Player::v_string() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_string)
  return v_string_.GetNoArena();
}
void Player::set_v_string(const ::std::string& value) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_string)
}
#if LANG_CXX11
void Player::set_v_string(::std::string&& value) {
  set_has_v_string();
  v_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_string)
}
#endif
void Player::set_v_string(const char* value) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_string)
}
void Player::set_v_string(const void* value, size_t size) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_string)
}
::std::string* Player::mutable_v_string() {
  set_has_v_string();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_string)
  return v_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_string() {
  // @@protoc_insertion_point(field_release:bin.Player.v_string)
  clear_has_v_string();
  return v_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_string(::std::string* v_string) {
  if (v_string != NULL) {
    set_has_v_string();
  } else {
    clear_has_v_string();
  }
  v_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_string);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_string)
}

// optional bytes v_char = 17;
bool Player::has_v_char() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Player::set_has_v_char() {
  _has_bits_[0] |= 0x00000008u;
}
void Player::clear_has_v_char() {
  _has_bits_[0] &= ~0x00000008u;
}
void Player::clear_v_char() {
  v_char_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_char();
}
const ::std::string& Player::v_char() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_char)
  return v_char_.GetNoArena();
}
void Player::set_v_char(const ::std::string& value) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_char)
}
#if LANG_CXX11
void Player::set_v_char(::std::string&& value) {
  set_has_v_char();
  v_char_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_char)
}
#endif
void Player::set_v_char(const char* value) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_char)
}
void Player::set_v_char(const void* value, size_t size) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_char)
}
::std::string* Player::mutable_v_char() {
  set_has_v_char();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_char)
  return v_char_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_char() {
  // @@protoc_insertion_point(field_release:bin.Player.v_char)
  clear_has_v_char();
  return v_char_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_char(::std::string* v_char) {
  if (v_char != NULL) {
    set_has_v_char();
  } else {
    clear_has_v_char();
  }
  v_char_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_char);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_char)
}

// optional bytes v_bytes = 18;
bool Player::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Player::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void Player::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void Player::clear_v_bytes() {
  v_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes();
}
const ::std::string& Player::v_bytes() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes)
  return v_bytes_.GetNoArena();
}
void Player::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes)
}
#if LANG_CXX11
void Player::set_v_bytes(::std::string&& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes)
}
#endif
void Player::set_v_bytes(const char* value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes)
}
void Player::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes)
}
::std::string* Player::mutable_v_bytes() {
  set_has_v_bytes();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes)
  return v_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_bytes() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes)
  clear_has_v_bytes();
  return v_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_bytes(::std::string* v_bytes) {
  if (v_bytes != NULL) {
    set_has_v_bytes();
  } else {
    clear_has_v_bytes();
  }
  v_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes)
}

// optional bytes v_bytes_tiny = 19;
bool Player::has_v_bytes_tiny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Player::set_has_v_bytes_tiny() {
  _has_bits_[0] |= 0x00000020u;
}
void Player::clear_has_v_bytes_tiny() {
  _has_bits_[0] &= ~0x00000020u;
}
void Player::clear_v_bytes_tiny() {
  v_bytes_tiny_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_tiny();
}
const ::std::string& Player::v_bytes_tiny() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_tiny)
  return v_bytes_tiny_.GetNoArena();
}
void Player::set_v_bytes_tiny(const ::std::string& value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_tiny)
}
#if LANG_CXX11
void Player::set_v_bytes_tiny(::std::string&& value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_tiny)
}
#endif
void Player::set_v_bytes_tiny(const char* value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_tiny)
}
void Player::set_v_bytes_tiny(const void* value, size_t size) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_tiny)
}
::std::string* Player::mutable_v_bytes_tiny() {
  set_has_v_bytes_tiny();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_tiny)
  return v_bytes_tiny_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_bytes_tiny() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_tiny)
  clear_has_v_bytes_tiny();
  return v_bytes_tiny_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_bytes_tiny(::std::string* v_bytes_tiny) {
  if (v_bytes_tiny != NULL) {
    set_has_v_bytes_tiny();
  } else {
    clear_has_v_bytes_tiny();
  }
  v_bytes_tiny_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_tiny);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_tiny)
}

// optional bytes v_bytes_medium = 20;
bool Player::has_v_bytes_medium() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Player::set_has_v_bytes_medium() {
  _has_bits_[0] |= 0x00000040u;
}
void Player::clear_has_v_bytes_medium() {
  _has_bits_[0] &= ~0x00000040u;
}
void Player::clear_v_bytes_medium() {
  v_bytes_medium_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_medium();
}
const ::std::string& Player::v_bytes_medium() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_medium)
  return v_bytes_medium_.GetNoArena();
}
void Player::set_v_bytes_medium(const ::std::string& value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_medium)
}
#if LANG_CXX11
void Player::set_v_bytes_medium(::std::string&& value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_medium)
}
#endif
void Player::set_v_bytes_medium(const char* value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_medium)
}
void Player::set_v_bytes_medium(const void* value, size_t size) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_medium)
}
::std::string* Player::mutable_v_bytes_medium() {
  set_has_v_bytes_medium();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_medium)
  return v_bytes_medium_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_bytes_medium() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_medium)
  clear_has_v_bytes_medium();
  return v_bytes_medium_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_bytes_medium(::std::string* v_bytes_medium) {
  if (v_bytes_medium != NULL) {
    set_has_v_bytes_medium();
  } else {
    clear_has_v_bytes_medium();
  }
  v_bytes_medium_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_medium);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_medium)
}

// optional bytes v_bytes_long = 21;
bool Player::has_v_bytes_long() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Player::set_has_v_bytes_long() {
  _has_bits_[0] |= 0x00000080u;
}
void Player::clear_has_v_bytes_long() {
  _has_bits_[0] &= ~0x00000080u;
}
void Player::clear_v_bytes_long() {
  v_bytes_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_long();
}
const ::std::string& Player::v_bytes_long() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_long)
  return v_bytes_long_.GetNoArena();
}
void Player::set_v_bytes_long(const ::std::string& value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_long)
}
#if LANG_CXX11
void Player::set_v_bytes_long(::std::string&& value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_long)
}
#endif
void Player::set_v_bytes_long(const char* value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_long)
}
void Player::set_v_bytes_long(const void* value, size_t size) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_long)
}
::std::string* Player::mutable_v_bytes_long() {
  set_has_v_bytes_long();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_long)
  return v_bytes_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_v_bytes_long() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_long)
  clear_has_v_bytes_long();
  return v_bytes_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_v_bytes_long(::std::string* v_bytes_long) {
  if (v_bytes_long != NULL) {
    set_has_v_bytes_long();
  } else {
    clear_has_v_bytes_long();
  }
  v_bytes_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_long);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_long)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bin

// @@protoc_insertion_point(global_scope)
