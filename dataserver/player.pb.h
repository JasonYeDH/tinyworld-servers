// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace bin {
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace bin

namespace bin {

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_player_2eproto

// ===================================================================

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bin.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes bin = 4;
  bool has_bin() const;
  void clear_bin();
  static const int kBinFieldNumber = 4;
  const ::std::string& bin() const;
  void set_bin(const ::std::string& value);
  #if LANG_CXX11
  void set_bin(::std::string&& value);
  #endif
  void set_bin(const char* value);
  void set_bin(const void* value, size_t size);
  ::std::string* mutable_bin();
  ::std::string* release_bin();
  void set_allocated_bin(::std::string* bin);

  // optional bytes v_string = 16;
  bool has_v_string() const;
  void clear_v_string();
  static const int kVStringFieldNumber = 16;
  const ::std::string& v_string() const;
  void set_v_string(const ::std::string& value);
  #if LANG_CXX11
  void set_v_string(::std::string&& value);
  #endif
  void set_v_string(const char* value);
  void set_v_string(const void* value, size_t size);
  ::std::string* mutable_v_string();
  ::std::string* release_v_string();
  void set_allocated_v_string(::std::string* v_string);

  // optional bytes v_char = 17;
  bool has_v_char() const;
  void clear_v_char();
  static const int kVCharFieldNumber = 17;
  const ::std::string& v_char() const;
  void set_v_char(const ::std::string& value);
  #if LANG_CXX11
  void set_v_char(::std::string&& value);
  #endif
  void set_v_char(const char* value);
  void set_v_char(const void* value, size_t size);
  ::std::string* mutable_v_char();
  ::std::string* release_v_char();
  void set_allocated_v_char(::std::string* v_char);

  // optional bytes v_bytes = 18;
  bool has_v_bytes() const;
  void clear_v_bytes();
  static const int kVBytesFieldNumber = 18;
  const ::std::string& v_bytes() const;
  void set_v_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_v_bytes(::std::string&& value);
  #endif
  void set_v_bytes(const char* value);
  void set_v_bytes(const void* value, size_t size);
  ::std::string* mutable_v_bytes();
  ::std::string* release_v_bytes();
  void set_allocated_v_bytes(::std::string* v_bytes);

  // optional bytes v_bytes_tiny = 19;
  bool has_v_bytes_tiny() const;
  void clear_v_bytes_tiny();
  static const int kVBytesTinyFieldNumber = 19;
  const ::std::string& v_bytes_tiny() const;
  void set_v_bytes_tiny(const ::std::string& value);
  #if LANG_CXX11
  void set_v_bytes_tiny(::std::string&& value);
  #endif
  void set_v_bytes_tiny(const char* value);
  void set_v_bytes_tiny(const void* value, size_t size);
  ::std::string* mutable_v_bytes_tiny();
  ::std::string* release_v_bytes_tiny();
  void set_allocated_v_bytes_tiny(::std::string* v_bytes_tiny);

  // optional bytes v_bytes_medium = 20;
  bool has_v_bytes_medium() const;
  void clear_v_bytes_medium();
  static const int kVBytesMediumFieldNumber = 20;
  const ::std::string& v_bytes_medium() const;
  void set_v_bytes_medium(const ::std::string& value);
  #if LANG_CXX11
  void set_v_bytes_medium(::std::string&& value);
  #endif
  void set_v_bytes_medium(const char* value);
  void set_v_bytes_medium(const void* value, size_t size);
  ::std::string* mutable_v_bytes_medium();
  ::std::string* release_v_bytes_medium();
  void set_allocated_v_bytes_medium(::std::string* v_bytes_medium);

  // optional bytes v_bytes_long = 21;
  bool has_v_bytes_long() const;
  void clear_v_bytes_long();
  static const int kVBytesLongFieldNumber = 21;
  const ::std::string& v_bytes_long() const;
  void set_v_bytes_long(const ::std::string& value);
  #if LANG_CXX11
  void set_v_bytes_long(::std::string&& value);
  #endif
  void set_v_bytes_long(const char* value);
  void set_v_bytes_long(const void* value, size_t size);
  ::std::string* mutable_v_bytes_long();
  ::std::string* release_v_bytes_long();
  void set_allocated_v_bytes_long(::std::string* v_bytes_long);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional float score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  float score() const;
  void set_score(float value);

  // optional sint32 v_int8 = 5;
  bool has_v_int8() const;
  void clear_v_int8();
  static const int kVInt8FieldNumber = 5;
  ::google::protobuf::int32 v_int8() const;
  void set_v_int8(::google::protobuf::int32 value);

  // optional uint32 v_uint8 = 6;
  bool has_v_uint8() const;
  void clear_v_uint8();
  static const int kVUint8FieldNumber = 6;
  ::google::protobuf::uint32 v_uint8() const;
  void set_v_uint8(::google::protobuf::uint32 value);

  // optional sint32 v_int16 = 7;
  bool has_v_int16() const;
  void clear_v_int16();
  static const int kVInt16FieldNumber = 7;
  ::google::protobuf::int32 v_int16() const;
  void set_v_int16(::google::protobuf::int32 value);

  // optional uint32 v_uint16 = 8;
  bool has_v_uint16() const;
  void clear_v_uint16();
  static const int kVUint16FieldNumber = 8;
  ::google::protobuf::uint32 v_uint16() const;
  void set_v_uint16(::google::protobuf::uint32 value);

  // optional sint32 v_int32 = 9;
  bool has_v_int32() const;
  void clear_v_int32();
  static const int kVInt32FieldNumber = 9;
  ::google::protobuf::int32 v_int32() const;
  void set_v_int32(::google::protobuf::int32 value);

  // optional uint32 v_uint32 = 10;
  bool has_v_uint32() const;
  void clear_v_uint32();
  static const int kVUint32FieldNumber = 10;
  ::google::protobuf::uint32 v_uint32() const;
  void set_v_uint32(::google::protobuf::uint32 value);

  // optional sint64 v_int64 = 11;
  bool has_v_int64() const;
  void clear_v_int64();
  static const int kVInt64FieldNumber = 11;
  ::google::protobuf::int64 v_int64() const;
  void set_v_int64(::google::protobuf::int64 value);

  // optional uint64 v_uint64 = 12;
  bool has_v_uint64() const;
  void clear_v_uint64();
  static const int kVUint64FieldNumber = 12;
  ::google::protobuf::uint64 v_uint64() const;
  void set_v_uint64(::google::protobuf::uint64 value);

  // optional double v_double = 14;
  bool has_v_double() const;
  void clear_v_double();
  static const int kVDoubleFieldNumber = 14;
  double v_double() const;
  void set_v_double(double value);

  // optional float v_float = 13;
  bool has_v_float() const;
  void clear_v_float();
  static const int kVFloatFieldNumber = 13;
  float v_float() const;
  void set_v_float(float value);

  // optional bool v_bool = 15;
  bool has_v_bool() const;
  void clear_v_bool();
  static const int kVBoolFieldNumber = 15;
  bool v_bool() const;
  void set_v_bool(bool value);

  // @@protoc_insertion_point(class_scope:bin.Player)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_score();
  void clear_has_score();
  void set_has_bin();
  void clear_has_bin();
  void set_has_v_int8();
  void clear_has_v_int8();
  void set_has_v_uint8();
  void clear_has_v_uint8();
  void set_has_v_int16();
  void clear_has_v_int16();
  void set_has_v_uint16();
  void clear_has_v_uint16();
  void set_has_v_int32();
  void clear_has_v_int32();
  void set_has_v_uint32();
  void clear_has_v_uint32();
  void set_has_v_int64();
  void clear_has_v_int64();
  void set_has_v_uint64();
  void clear_has_v_uint64();
  void set_has_v_float();
  void clear_has_v_float();
  void set_has_v_double();
  void clear_has_v_double();
  void set_has_v_bool();
  void clear_has_v_bool();
  void set_has_v_string();
  void clear_has_v_string();
  void set_has_v_char();
  void clear_has_v_char();
  void set_has_v_bytes();
  void clear_has_v_bytes();
  void set_has_v_bytes_tiny();
  void clear_has_v_bytes_tiny();
  void set_has_v_bytes_medium();
  void clear_has_v_bytes_medium();
  void set_has_v_bytes_long();
  void clear_has_v_bytes_long();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr bin_;
  ::google::protobuf::internal::ArenaStringPtr v_string_;
  ::google::protobuf::internal::ArenaStringPtr v_char_;
  ::google::protobuf::internal::ArenaStringPtr v_bytes_;
  ::google::protobuf::internal::ArenaStringPtr v_bytes_tiny_;
  ::google::protobuf::internal::ArenaStringPtr v_bytes_medium_;
  ::google::protobuf::internal::ArenaStringPtr v_bytes_long_;
  ::google::protobuf::uint32 id_;
  float score_;
  ::google::protobuf::int32 v_int8_;
  ::google::protobuf::uint32 v_uint8_;
  ::google::protobuf::int32 v_int16_;
  ::google::protobuf::uint32 v_uint16_;
  ::google::protobuf::int32 v_int32_;
  ::google::protobuf::uint32 v_uint32_;
  ::google::protobuf::int64 v_int64_;
  ::google::protobuf::uint64 v_uint64_;
  double v_double_;
  float v_float_;
  bool v_bool_;
  friend struct  protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional uint32 id = 1;
inline bool Player::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Player::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Player::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Player::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Player::id() const {
  // @@protoc_insertion_point(field_get:bin.Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.id)
}

// optional bytes name = 2;
inline bool Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:bin.Player.name)
  return name_.GetNoArena();
}
inline void Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.name)
}
#if LANG_CXX11
inline void Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.name)
}
#endif
inline void Player::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.name)
}
inline void Player::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.name)
}
inline ::std::string* Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bin.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:bin.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.name)
}

// optional float score = 3;
inline bool Player::has_score() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Player::set_has_score() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Player::clear_has_score() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Player::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float Player::score() const {
  // @@protoc_insertion_point(field_get:bin.Player.score)
  return score_;
}
inline void Player::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.score)
}

// optional bytes bin = 4;
inline bool Player::has_bin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_bin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_bin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_bin() {
  bin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bin();
}
inline const ::std::string& Player::bin() const {
  // @@protoc_insertion_point(field_get:bin.Player.bin)
  return bin_.GetNoArena();
}
inline void Player::set_bin(const ::std::string& value) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.bin)
}
#if LANG_CXX11
inline void Player::set_bin(::std::string&& value) {
  set_has_bin();
  bin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.bin)
}
#endif
inline void Player::set_bin(const char* value) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.bin)
}
inline void Player::set_bin(const void* value, size_t size) {
  set_has_bin();
  bin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.bin)
}
inline ::std::string* Player::mutable_bin() {
  set_has_bin();
  // @@protoc_insertion_point(field_mutable:bin.Player.bin)
  return bin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_bin() {
  // @@protoc_insertion_point(field_release:bin.Player.bin)
  clear_has_bin();
  return bin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_bin(::std::string* bin) {
  if (bin != NULL) {
    set_has_bin();
  } else {
    clear_has_bin();
  }
  bin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bin);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.bin)
}

// optional sint32 v_int8 = 5;
inline bool Player::has_v_int8() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Player::set_has_v_int8() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Player::clear_has_v_int8() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Player::clear_v_int8() {
  v_int8_ = 0;
  clear_has_v_int8();
}
inline ::google::protobuf::int32 Player::v_int8() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int8)
  return v_int8_;
}
inline void Player::set_v_int8(::google::protobuf::int32 value) {
  set_has_v_int8();
  v_int8_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int8)
}

// optional uint32 v_uint8 = 6;
inline bool Player::has_v_uint8() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Player::set_has_v_uint8() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Player::clear_has_v_uint8() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Player::clear_v_uint8() {
  v_uint8_ = 0u;
  clear_has_v_uint8();
}
inline ::google::protobuf::uint32 Player::v_uint8() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint8)
  return v_uint8_;
}
inline void Player::set_v_uint8(::google::protobuf::uint32 value) {
  set_has_v_uint8();
  v_uint8_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint8)
}

// optional sint32 v_int16 = 7;
inline bool Player::has_v_int16() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Player::set_has_v_int16() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Player::clear_has_v_int16() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Player::clear_v_int16() {
  v_int16_ = 0;
  clear_has_v_int16();
}
inline ::google::protobuf::int32 Player::v_int16() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int16)
  return v_int16_;
}
inline void Player::set_v_int16(::google::protobuf::int32 value) {
  set_has_v_int16();
  v_int16_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int16)
}

// optional uint32 v_uint16 = 8;
inline bool Player::has_v_uint16() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Player::set_has_v_uint16() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Player::clear_has_v_uint16() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Player::clear_v_uint16() {
  v_uint16_ = 0u;
  clear_has_v_uint16();
}
inline ::google::protobuf::uint32 Player::v_uint16() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint16)
  return v_uint16_;
}
inline void Player::set_v_uint16(::google::protobuf::uint32 value) {
  set_has_v_uint16();
  v_uint16_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint16)
}

// optional sint32 v_int32 = 9;
inline bool Player::has_v_int32() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Player::set_has_v_int32() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Player::clear_has_v_int32() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Player::clear_v_int32() {
  v_int32_ = 0;
  clear_has_v_int32();
}
inline ::google::protobuf::int32 Player::v_int32() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int32)
  return v_int32_;
}
inline void Player::set_v_int32(::google::protobuf::int32 value) {
  set_has_v_int32();
  v_int32_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int32)
}

// optional uint32 v_uint32 = 10;
inline bool Player::has_v_uint32() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Player::set_has_v_uint32() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Player::clear_has_v_uint32() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Player::clear_v_uint32() {
  v_uint32_ = 0u;
  clear_has_v_uint32();
}
inline ::google::protobuf::uint32 Player::v_uint32() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint32)
  return v_uint32_;
}
inline void Player::set_v_uint32(::google::protobuf::uint32 value) {
  set_has_v_uint32();
  v_uint32_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint32)
}

// optional sint64 v_int64 = 11;
inline bool Player::has_v_int64() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Player::set_has_v_int64() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Player::clear_has_v_int64() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Player::clear_v_int64() {
  v_int64_ = GOOGLE_LONGLONG(0);
  clear_has_v_int64();
}
inline ::google::protobuf::int64 Player::v_int64() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_int64)
  return v_int64_;
}
inline void Player::set_v_int64(::google::protobuf::int64 value) {
  set_has_v_int64();
  v_int64_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_int64)
}

// optional uint64 v_uint64 = 12;
inline bool Player::has_v_uint64() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Player::set_has_v_uint64() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Player::clear_has_v_uint64() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Player::clear_v_uint64() {
  v_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_v_uint64();
}
inline ::google::protobuf::uint64 Player::v_uint64() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_uint64)
  return v_uint64_;
}
inline void Player::set_v_uint64(::google::protobuf::uint64 value) {
  set_has_v_uint64();
  v_uint64_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_uint64)
}

// optional float v_float = 13;
inline bool Player::has_v_float() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Player::set_has_v_float() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Player::clear_has_v_float() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Player::clear_v_float() {
  v_float_ = 0;
  clear_has_v_float();
}
inline float Player::v_float() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_float)
  return v_float_;
}
inline void Player::set_v_float(float value) {
  set_has_v_float();
  v_float_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_float)
}

// optional double v_double = 14;
inline bool Player::has_v_double() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Player::set_has_v_double() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Player::clear_has_v_double() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Player::clear_v_double() {
  v_double_ = 0;
  clear_has_v_double();
}
inline double Player::v_double() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_double)
  return v_double_;
}
inline void Player::set_v_double(double value) {
  set_has_v_double();
  v_double_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_double)
}

// optional bool v_bool = 15;
inline bool Player::has_v_bool() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Player::set_has_v_bool() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Player::clear_has_v_bool() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Player::clear_v_bool() {
  v_bool_ = false;
  clear_has_v_bool();
}
inline bool Player::v_bool() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bool)
  return v_bool_;
}
inline void Player::set_v_bool(bool value) {
  set_has_v_bool();
  v_bool_ = value;
  // @@protoc_insertion_point(field_set:bin.Player.v_bool)
}

// optional bytes v_string = 16;
inline bool Player::has_v_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_v_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_v_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_v_string() {
  v_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_string();
}
inline const ::std::string& Player::v_string() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_string)
  return v_string_.GetNoArena();
}
inline void Player::set_v_string(const ::std::string& value) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_string)
}
#if LANG_CXX11
inline void Player::set_v_string(::std::string&& value) {
  set_has_v_string();
  v_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_string)
}
#endif
inline void Player::set_v_string(const char* value) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_string)
}
inline void Player::set_v_string(const void* value, size_t size) {
  set_has_v_string();
  v_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_string)
}
inline ::std::string* Player::mutable_v_string() {
  set_has_v_string();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_string)
  return v_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_string() {
  // @@protoc_insertion_point(field_release:bin.Player.v_string)
  clear_has_v_string();
  return v_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_string(::std::string* v_string) {
  if (v_string != NULL) {
    set_has_v_string();
  } else {
    clear_has_v_string();
  }
  v_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_string);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_string)
}

// optional bytes v_char = 17;
inline bool Player::has_v_char() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_v_char() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_v_char() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_v_char() {
  v_char_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_char();
}
inline const ::std::string& Player::v_char() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_char)
  return v_char_.GetNoArena();
}
inline void Player::set_v_char(const ::std::string& value) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_char)
}
#if LANG_CXX11
inline void Player::set_v_char(::std::string&& value) {
  set_has_v_char();
  v_char_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_char)
}
#endif
inline void Player::set_v_char(const char* value) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_char)
}
inline void Player::set_v_char(const void* value, size_t size) {
  set_has_v_char();
  v_char_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_char)
}
inline ::std::string* Player::mutable_v_char() {
  set_has_v_char();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_char)
  return v_char_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_char() {
  // @@protoc_insertion_point(field_release:bin.Player.v_char)
  clear_has_v_char();
  return v_char_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_char(::std::string* v_char) {
  if (v_char != NULL) {
    set_has_v_char();
  } else {
    clear_has_v_char();
  }
  v_char_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_char);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_char)
}

// optional bytes v_bytes = 18;
inline bool Player::has_v_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_v_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_v_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_v_bytes() {
  v_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes();
}
inline const ::std::string& Player::v_bytes() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes)
  return v_bytes_.GetNoArena();
}
inline void Player::set_v_bytes(const ::std::string& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes)
}
#if LANG_CXX11
inline void Player::set_v_bytes(::std::string&& value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes)
}
#endif
inline void Player::set_v_bytes(const char* value) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes)
}
inline void Player::set_v_bytes(const void* value, size_t size) {
  set_has_v_bytes();
  v_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes)
}
inline ::std::string* Player::mutable_v_bytes() {
  set_has_v_bytes();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes)
  return v_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_bytes() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes)
  clear_has_v_bytes();
  return v_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_bytes(::std::string* v_bytes) {
  if (v_bytes != NULL) {
    set_has_v_bytes();
  } else {
    clear_has_v_bytes();
  }
  v_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes)
}

// optional bytes v_bytes_tiny = 19;
inline bool Player::has_v_bytes_tiny() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_v_bytes_tiny() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_v_bytes_tiny() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_v_bytes_tiny() {
  v_bytes_tiny_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_tiny();
}
inline const ::std::string& Player::v_bytes_tiny() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_tiny)
  return v_bytes_tiny_.GetNoArena();
}
inline void Player::set_v_bytes_tiny(const ::std::string& value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_tiny)
}
#if LANG_CXX11
inline void Player::set_v_bytes_tiny(::std::string&& value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_tiny)
}
#endif
inline void Player::set_v_bytes_tiny(const char* value) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_tiny)
}
inline void Player::set_v_bytes_tiny(const void* value, size_t size) {
  set_has_v_bytes_tiny();
  v_bytes_tiny_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_tiny)
}
inline ::std::string* Player::mutable_v_bytes_tiny() {
  set_has_v_bytes_tiny();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_tiny)
  return v_bytes_tiny_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_bytes_tiny() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_tiny)
  clear_has_v_bytes_tiny();
  return v_bytes_tiny_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_bytes_tiny(::std::string* v_bytes_tiny) {
  if (v_bytes_tiny != NULL) {
    set_has_v_bytes_tiny();
  } else {
    clear_has_v_bytes_tiny();
  }
  v_bytes_tiny_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_tiny);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_tiny)
}

// optional bytes v_bytes_medium = 20;
inline bool Player::has_v_bytes_medium() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_v_bytes_medium() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_v_bytes_medium() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_v_bytes_medium() {
  v_bytes_medium_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_medium();
}
inline const ::std::string& Player::v_bytes_medium() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_medium)
  return v_bytes_medium_.GetNoArena();
}
inline void Player::set_v_bytes_medium(const ::std::string& value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_medium)
}
#if LANG_CXX11
inline void Player::set_v_bytes_medium(::std::string&& value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_medium)
}
#endif
inline void Player::set_v_bytes_medium(const char* value) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_medium)
}
inline void Player::set_v_bytes_medium(const void* value, size_t size) {
  set_has_v_bytes_medium();
  v_bytes_medium_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_medium)
}
inline ::std::string* Player::mutable_v_bytes_medium() {
  set_has_v_bytes_medium();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_medium)
  return v_bytes_medium_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_bytes_medium() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_medium)
  clear_has_v_bytes_medium();
  return v_bytes_medium_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_bytes_medium(::std::string* v_bytes_medium) {
  if (v_bytes_medium != NULL) {
    set_has_v_bytes_medium();
  } else {
    clear_has_v_bytes_medium();
  }
  v_bytes_medium_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_medium);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_medium)
}

// optional bytes v_bytes_long = 21;
inline bool Player::has_v_bytes_long() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Player::set_has_v_bytes_long() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Player::clear_has_v_bytes_long() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Player::clear_v_bytes_long() {
  v_bytes_long_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_v_bytes_long();
}
inline const ::std::string& Player::v_bytes_long() const {
  // @@protoc_insertion_point(field_get:bin.Player.v_bytes_long)
  return v_bytes_long_.GetNoArena();
}
inline void Player::set_v_bytes_long(const ::std::string& value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bin.Player.v_bytes_long)
}
#if LANG_CXX11
inline void Player::set_v_bytes_long(::std::string&& value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bin.Player.v_bytes_long)
}
#endif
inline void Player::set_v_bytes_long(const char* value) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bin.Player.v_bytes_long)
}
inline void Player::set_v_bytes_long(const void* value, size_t size) {
  set_has_v_bytes_long();
  v_bytes_long_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bin.Player.v_bytes_long)
}
inline ::std::string* Player::mutable_v_bytes_long() {
  set_has_v_bytes_long();
  // @@protoc_insertion_point(field_mutable:bin.Player.v_bytes_long)
  return v_bytes_long_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_v_bytes_long() {
  // @@protoc_insertion_point(field_release:bin.Player.v_bytes_long)
  clear_has_v_bytes_long();
  return v_bytes_long_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_v_bytes_long(::std::string* v_bytes_long) {
  if (v_bytes_long != NULL) {
    set_has_v_bytes_long();
  } else {
    clear_has_v_bytes_long();
  }
  v_bytes_long_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v_bytes_long);
  // @@protoc_insertion_point(field_set_allocated:bin.Player.v_bytes_long)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace bin

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_2eproto__INCLUDED
